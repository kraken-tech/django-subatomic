{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Subatomic docs","text":""},{"location":"why/","title":"Why","text":""},{"location":"why/#djangos-atomic","title":"Django's Atomic","text":"<p>Django's <code>atomic</code> ensures database changes are committed together-or-not-at-all. It creates a savepoint or a transaction depending on two factors:</p> <ul> <li>The arguments passed to it (<code>durable</code> and <code>savepoint</code>).</li> <li>If a database transaction is already open.</li> </ul> <p>Specifically, the Behaviours which <code>atomic</code> exhibits are:</p> <code>durable=False</code> (default) <code>durable=True</code> <code>savepoint=True</code> (default) A. Begin a transaction if needed. Creates a savepoint if already in a transaction. B. Begin a transaction, or throw an error if one is already open. Never creates a savepoint. (The <code>savepoint</code> flag is ignored.) <code>savepoint=False</code> C. Begin a transaction if needed. Never creates a savepoint. D. Same as B. <p>Uses of <code>atomic</code> fall into three broad Categories:</p> <ol> <li>Create a transaction to wrap multiple changes.</li> <li>Create a savepoint so we can roll back to in order to continue with a transaction after failure.</li> <li>Changes to be committed atomically, but not specific about where the transaction is created, as long as there is one.</li> </ol>"},{"location":"why/#problems","title":"Problems","text":"<p>Django's atomic creates many savepoints that are never used. There are a couple of main causes:</p> <ol> <li>Savepoints are created with decorators (<code>@atomic</code>).</li> <li><code>atomic</code> creates savepoints by default. The default arguments (Behaviour A) are an attractive nuisance because they make us create savepoints when we don't need them.     &gt; \u2026 if you have two ways to accomplish a task and one is a simple way that looks like the right thing but is subtly wrong, and the other is correct but     &gt; more complicated, the majority of people will end up doing the wrong     &gt; thing.     &gt; \u2014 Attractive nuisances in software design - Paul Ganssle</li> <li>We have no easy way to indicate the creation of a savepoint that doesn't have the potential to create a transaction instead. The only tool we have to create a savepoint is Behaviour A, which can create a transaction.</li> </ol>"},{"location":"why/#what-subatomic-implements","title":"What Subatomic implements","text":"<ul> <li><code>transaction()</code>. Begin a transaction, or throw an error if a transaction is already open. Like <code>atomic(durable=True)</code>, but with added after-commit callback support in tests.</li> <li><code>savepoint()</code>. Create a savepoint, or throw an error if we're not already in a transaction. This is not in the table of Behaviours (the closest we have is Behaviour A, but that can create transactions).</li> <li><code>transaction_if_not_already()</code>. Begin a transaction if we're not already in one. Just like Behaviour C. This has a bit of a clunky name. This is deliberate, and reflects that it's a bit of a clunky thing to do. To be used with caution because the creation of a transaction is implicit. For a stricter alternative, see <code>transaction_required()</code> below.</li> <li><code>transaction_required()</code>. Throw an error if we're not already in a transaction. Does not create savepoints or transactions.</li> </ul>"}]}